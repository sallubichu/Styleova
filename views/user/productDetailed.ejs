<%- include('../partials/userHeader') %>

<!-- Gradient Background -->
<div
  class="bg-gradient-primary shadow-lg"
  style="background: linear-gradient(135deg, #6a11cb, #2575fc)"
>
  <div class="container py-3">
    <!-- Breadcrumb -->
    <nav class="d-flex">
      <h5 class="mb-0">
        <a
          href="/user/dashboard"
          class="text-white-50"
          style="text-decoration: none"
          >Home</a
        >
        <span class="text-white mx-2"> > </span>
        <a
          href="/user/products"
          class="text-white"
          style="text-decoration: none"
          >Products</a
        >
        <span class="text-white mx-2"> > </span>
        <a href="#" class="text-white" style="text-decoration: none"
          ><%= data.name %></a
        >
      </h5>
    </nav>
    <!-- Breadcrumb -->
  </div>
</div>

<!-- Product Details Section -->
<div class="container my-5">
  <div class="row">
    <!-- Product Images -->
    <div class="col-lg-6">
      <div
        id="carouselExampleCaptions"
        class="carousel slide border rounded-4 mb-3"
      >
        <div class="carousel-inner">
          <% data.images.forEach((image, index)=> { %>
          <div class="carousel-item <%= index === 0 ? 'active' : '' %>">
            <div class="image-container">
              <img
                class="d-block w-100"
                src="/<%= image %>"
                style="border-radius: 10px"
              />
              <div class="zoom-lens"></div>
            </div>
          </div>
          <% }) %>
        </div>
        <button
          class="carousel-control-prev"
          type="button"
          data-bs-target="#carouselExampleCaptions"
          data-bs-slide="prev"
        >
          <span class="carousel-control-prev-icon" aria-hidden="true"></span>
          <span class="visually-hidden">Previous</span>
        </button>
        <button
          class="carousel-control-next"
          type="button"
          data-bs-target="#carouselExampleCaptions"
          data-bs-slide="next"
        >
          <span class="carousel-control-next-icon" aria-hidden="true"></span>
          <span class="visually-hidden">Next</span>
        </button>
      </div>
      <div class="d-flex justify-content-center mb-3">
        <% data.images.forEach((image, index)=> { %>
        <a
          class="border mx-1 rounded-2 item-thumb"
          href="javascript:void(0)"
          data-image-index="<%= index %>"
        >
          <img width="60" height="60" class="rounded-2" src="/<%= image %>" />
        </a>
        <% }) %>
      </div>
    </div>

    <!-- Product Information -->
    <div class="col-lg-6">
      <div class="ps-lg-3">
        <h4
          class="product-title mb-3"
          style="font-size: 1.5rem; font-weight: 600"
        >
          <%= data.name %>
        </h4>
        <div class="d-flex flex-row my-3">
          <div class="text-warning mb-1 me-2">
            <% for (let i = 1; i <= 5; i++) { %> <% if (i <=
            Math.floor(data.rating)) { %>
            <i class="fa fa-star"></i>
            <% } else if (i === Math.ceil(data.rating) && data.rating % 1 !== 0)
            { %>
            <i class="fa fa-star-half-alt"></i>
            <% } else { %>
            <i class="fa fa-star text-muted"></i>
            <% } %> <% } %>
            <span class="ms-1" style="font-size: 0.9rem">
              <%= data.rating %> Rating
            </span>
          </div>
        </div>
        <div class="mb-3">
          <span
            class="product-price"
            style="font-size: 1.25rem; font-weight: 600; color: #28a745"
          >
            Rs. <%= data.rate %>
          </span>
        </div>

        <p
          class="product-description mb-4"
          style="font-size: 0.9rem; color: #666"
        >
          <%= data.description %>
        </p>

        <!-- Stock Details by Size -->
        <div class="mb-4">
          <h6 class="mb-3" style="font-size: 1rem; font-weight: 500">
            Availability by Size:
          </h6>
          <div class="d-flex gap-3">
            <div class="size-stock">
              <span class="d-block" style="font-size: 0.9rem; color: #333"
                >Small</span
              >
              <span
                class="badge <%= data.stock.Small > 0 ? 'bg-success' : 'bg-danger' %>"
                style="font-size: 0.85rem"
              >
                <%= data.stock.Small > 0 ? `In Stock (${data.stock.Small})` :
                'Out of Stock' %>
              </span>
            </div>
            <div class="size-stock">
              <span class="d-block" style="font-size: 0.9rem; color: #333"
                >Medium</span
              >
              <span
                class="badge <%= data.stock.Medium > 0 ? 'bg-success' : 'bg-danger' %>"
                style="font-size: 0.85rem"
              >
                <%= data.stock.Medium > 0 ? `In Stock (${data.stock.Medium})` :
                'Out of Stock' %>
              </span>
            </div>
            <div class="size-stock">
              <span class="d-block" style="font-size: 0.9rem; color: #333"
                >Large</span
              >
              <span
                class="badge <%= data.stock.Large > 0 ? 'bg-success' : 'bg-danger' %>"
                style="font-size: 0.85rem"
              >
                <%= data.stock.Large > 0 ? `In Stock (${data.stock.Large})` :
                'Out of Stock' %>
              </span>
            </div>
          </div>
        </div>

        <!-- Size and Quantity -->
        <div class="row mb-4">
          <div class="col-md-4 col-6">
            <label class="mb-2 d-block" style="font-size: 0.9rem">Size</label>
            <select
              class="form-select border border-secondary"
              style="height: 35px"
              id="sizeSelector"
              required
            >
              <option value="" disabled selected>Select Size</option>
              <option value="Small">Small</option>
              <option value="Medium">Medium</option>
              <option value="Large">Large</option>
            </select>
          </div>
          <div class="col-md-4 col-6 mb-3">
            <label class="mb-2 d-block" style="font-size: 0.9rem"
              >Quantity</label
            >
            <div class="input-group mb-3" style="width: 170px">
              <button
                class="btn btn-white border border-secondary px-3"
                type="button"
                id="button-addon1"
              >
                <i class="fas fa-minus"></i>
              </button>
              <input
                type="number"
                class="form-control text-center border quantity border-secondary"
                id="quantityInput"
                placeholder="1"
                aria-label="Quantity"
                min="1"
                max="5"
                value="1"
              />
              <button
                class="btn btn-white border border-secondary px-3"
                type="button"
                id="button-addon2"
              >
                <i class="fas fa-plus"></i>
              </button>
            </div>
          </div>
        </div>

        <!-- Buttons -->
        <div class="d-flex gap-3">
          <button
            id="wishListButton"
            class="btn btn-danger"
            onclick="addToWishList()"
            data-id="<%= data._id %>"
          >
            <i class="bi bi-heart"></i> Add to Wishlist
          </button>
          <button
            class="btn btn-primary addToCart"
            onclick="addToCart(this)"
            data-id="<%= data._id %>"
          >
            <i class="me-1 fa fa-shopping-basket"></i> Add to cart
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Similar Products -->
<% if (similar.length> 0) { %>
<div class="container mt-5">
  <h2 class="text-center mb-4" style="color: #6a11cb">Similar Products</h2>
  <div class="row justify-content-center">
    <% similar.forEach(product=> { %>
    <div class="col-12 col-md-6 col-lg-4 mb-4">
      <div class="card h-100 shadow-lg border-0">
        <div class="card-img-top overflow-hidden" style="height: 200px">
          <img
            src="/<%= product.images[0] %>"
            class="img-fluid w-100 h-100"
            alt="<%= product.name %>"
            style="object-fit: cover"
          />
        </div>
        <div class="card-body">
          <h5 class="card-title text-primary"><%= product.name %></h5>
          <p class="card-text text-muted"><%= product.description %></p>
          <div class="d-flex justify-content-between align-items-center">
            <span class="text-success fw-bold">Rs. <%= product.rate %></span>
            <span class="text-warning">
              <% for (let i=1; i <=5; i++) { %> <% if (i
              <=Math.floor(product.rating)) { %>
              <i class="fa fa-star"></i>
              <% } else if (i===Math.ceil(product.rating) && product.rating % 1
              !==0) { %>
              <i class="fa fa-star-half-alt"></i>
              <% } else { %>
              <i class="fa fa-star text-muted"></i>
              <% } %> <% } %>
            </span>
          </div>
        </div>
        <div class="card-footer bg-transparent border-0">
          <a
            href="/user/productDetailed/<%= product._id %>"
            class="btn btn-primary w-100"
            >View Details</a
          >
        </div>
      </div>
    </div>
    <% }) %>
  </div>
</div>
<% } %>

<!-- Scripts -->
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const carousel = document.querySelector("#carouselExampleCaptions");
    const carouselInstance = new bootstrap.Carousel(carousel);
    const images = document.querySelectorAll(".carousel-item img");
    const lenses = document.querySelectorAll(".zoom-lens");

    // Thumbnail click functionality
    document.querySelectorAll(".item-thumb").forEach((thumbnail) => {
      thumbnail.addEventListener("click", function () {
        const index = this.getAttribute("data-image-index");
        carouselInstance.to(parseInt(index));
      });
    });

    // Zoom lens functionality
    images.forEach((img, i) => {
      const lens = lenses[i];

      img.addEventListener("mousemove", (e) => {
        const rect = img.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;

        const lensX = Math.max(
          0,
          Math.min(rect.width - lens.offsetWidth, x - lens.offsetWidth / 2)
        );
        const lensY = Math.max(
          0,
          Math.min(rect.height - lens.offsetHeight, y - lens.offsetHeight / 2)
        );

        const zoomFactor = 2;
        const backgroundSizeX = rect.width * zoomFactor;
        const backgroundSizeY = rect.height * zoomFactor;

        const backgroundPosX =
          (lensX / rect.width) * (backgroundSizeX - lens.offsetWidth);
        const backgroundPosY =
          (lensY / rect.height) * (backgroundSizeY - lens.offsetHeight);

        lens.style.left = `${lensX}px`;
        lens.style.top = `${lensY}px`;
        lens.style.backgroundImage = `url('${img.src}')`;
        lens.style.backgroundSize = `${backgroundSizeX}px ${backgroundSizeY}px`;
        lens.style.backgroundPosition = `-${backgroundPosX}px -${backgroundPosY}px`;
      });

      img.addEventListener("mouseleave", () => {
        lens.style.display = "none";
      });

      img.addEventListener("mouseenter", () => {
        lens.style.display = "block";
      });
    });
  });
</script>

<script
  src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
  integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
  crossorigin="anonymous"
></script>

<script>
  async function addToCart(button) {
    try {
      const quantity = document.getElementById("quantityInput").value.trim();
      const productId = button.getAttribute("data-id");
      const sizeSelector = document.getElementById("sizeSelector");
      const size = sizeSelector ? sizeSelector.value.trim() : "";

      if (!size || size === "") {
        Swal.fire({
          icon: "warning",
          title: "Size Required",
          text: "Please select a size before adding to cart.",
        });
        return;
      }

      const response = await fetch("/user/addToCart", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ productId, quantity, size }),
      });

      const data = await response.json();

      if (data.message === "Product added to cart") {
        Swal.fire({
          icon: "success",
          title: "Product Added!",
          text: "The product has been added to your cart.",
        });
      } else if (data.message === "Quantity exceeds available stock") {
        Swal.fire({
          icon: "warning",
          title: "Quantity Limit Reached",
          text: "You have reached the maximum quantity for this product.",
        });
      } else if (data.message === "nouser") {
        Swal.fire({
          icon: "info",
          title: "Not Logged In",
          text: "Please log in to add products to your cart.",
          showCancelButton: true,
          confirmButtonText: "OK",
          cancelButtonText: "Cancel",
        }).then((result) => {
          if (result.isConfirmed) {
            window.location.href = "/user/login";
          }
        });
      } else {
        Swal.fire({
          icon: "error",
          title: "Error",
          text:
            data.message ||
            "An error occurred while adding the product to your cart.",
        });
      }
    } catch (error) {
      console.error("Fetch Error:", error);
      Swal.fire({
        icon: "error",
        title: "Error",
        text: "An error occurred while processing your request.",
      });
    }
  }

  async function addToWishList() {
    const button = document.getElementById("wishListButton");
    const productId = button.getAttribute("data-id");

    const response = await fetch("/user/addToWishList", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      credentials: "include",
      body: JSON.stringify({ productId }),
    });

    const result = await response.json();

    if (result.message === "added") {
      Swal.fire({
        icon: "success",
        title: "Product Added!",
        text: "The product has been added to your Wishlist.",
      });
    } else if (result.message === "exists") {
      Swal.fire({
        icon: "warning",
        title: "Product already Exists!",
        text: "The product is already in your Wishlist.",
      });
    } else if (result.message === "nouser") {
      Swal.fire({
        icon: "warning",
        title: "Not Logged In!",
        text: "You need to be logged in to add products to your Wishlist.",
        showCancelButton: true,
        confirmButtonText: "Login",
        cancelButtonText: "Cancel",
      }).then((result) => {
        if (result.isConfirmed) {
          window.location.href = "/user/login";
        }
      });
    }
  }
  document.addEventListener("DOMContentLoaded", function () {
    const minusButton = document.getElementById("button-addon1");
    const plusButton = document.getElementById("button-addon2");
    const quantityInput = document.getElementById("quantityInput");

    function updateQuantity(change) {
      let currentQuantity = parseInt(quantityInput.value);
      if (isNaN(currentQuantity) || currentQuantity < 1) {
        currentQuantity = 1;
      }

      const newQuantity = currentQuantity + change;
      if (newQuantity >= 1 && newQuantity <= 5) {
        quantityInput.value = newQuantity;
      }
    }

    minusButton.addEventListener("click", function () {
      updateQuantity(-1);
    });

    plusButton.addEventListener("click", function () {
      updateQuantity(1);
    });

    quantityInput.addEventListener("input", function () {
      let currentQuantity = parseInt(quantityInput.value);
      if (isNaN(currentQuantity) || currentQuantity < 1) {
        quantityInput.value = 1;
      } else if (currentQuantity > 5) {
        quantityInput.value = 5;
      }
    });
  });
</script>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    if (<%= data.stockQuantity %> <= 0) {
      document.querySelector(".addToCart").disabled = true;
      document.querySelector(".addToCart").textContent = "Out of Stock";
    }
  });
</script>

<style>
  .zoom-lens {
    position: absolute;
    width: 100px; /* Adjust the size of the lens */
    height: 100px;
    border: 2px solid #fff;
    border-radius: 50%;
    cursor: none;
    display: none;
    pointer-events: none;
    background-repeat: no-repeat;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
  }

  .image-container {
    position: relative;
    overflow: hidden;
  }

  .image-container img {
    display: block;
    width: 100%;
    height: auto;
  }
</style>

<%- include('../partials/footer') %>
