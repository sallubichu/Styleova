<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Styleova - View Order</title>
    <link rel="icon" href="/img/landing/favicon.png">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.0/dist/sweetalert2.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.0/dist/sweetalert2.all.min.js"></script>

    <style>
        /* Modern Gradient Background */
        .gradient-custom {
            background: linear-gradient(135deg, #6a11cb, #2575fc);
        }

        /* Card Styling */
        .card {
            border: none;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        }

        /* Nav Tabs Styling */
        .nav-tabs {
            border-bottom: 2px solid #e9ecef;
        }

        .nav-tabs .nav-link {
            border: none;
            color: #6c757d;
            font-weight: 500;
            border-radius: 8px;
            margin: 0 5px;
            transition: all 0.3s ease;
        }

        .nav-tabs .nav-link.active {
            background: linear-gradient(135deg, #6a11cb, #2575fc);
            color: white;
            border-radius: 8px;
        }

        .nav-tabs .nav-link:hover {
            background: rgba(106, 17, 203, 0.1);
            color: #6a11cb;
        }

        /* Form Styling */
        .form-outline {
            position: relative;
            margin-bottom: 1.5rem;
        }

        .form-outline input {
            border: 1px solid #ced4da;
            border-radius: 8px;
            padding: 10px 15px;
            width: 100%;
            transition: border-color 0.3s ease;
        }

        .form-outline input:focus {
            border-color: #6a11cb;
            box-shadow: 0 0 5px rgba(106, 17, 203, 0.5);
        }

        .form-outline label {
            position: absolute;
            top: 50%;
            left: 15px;
            transform: translateY(-50%);
            background: white;
            padding: 0 5px;
            color: #6c757d;
            transition: all 0.3s ease;
        }

        .form-outline input:focus + label,
        .form-outline input:not(:placeholder-shown) + label {
            top: 0;
            font-size: 12px;
            color: #6a11cb;
        }

        /* Button Styling */
        .btn-primary {
            background: linear-gradient(135deg, #6a11cb, #2575fc);
            border: none;
            border-radius: 8px;
            padding: 10px 20px;
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(106, 17, 203, 0.3);
        }

        /* Address Card Styling */
        .address-card {
            background: white;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .address-card h3 {
            color: #333;
            font-weight: 600;
        }

        .address-card p {
            color: #666;
            margin-bottom: 10px;
        }

        .address-card .btn {
            margin: 5px;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .nav-tabs .nav-link {
                margin: 5px 0;
            }

            .col-lg-3, .col-lg-9 {
                padding: 0;
            }
        }
    </style>
</head>

<body>
    <%- include('../../partials/userHeader') %>

    <div class="gradient-custom">
        <div class="container py-4">
            <!-- Breadcrumb -->
            <nav class="d-flex">
                <h5 class="mb-0">
                    <a href="/user/dashboard" class="text-white-50">Home</a>
                    <span class="text-white-50 mx-2"> > </span>
                    <a href="/user/orders" class="text-white-50">My Orders</a>
                    <span class="text-white-50 mx-2"> > </span>
                    <a href="/user/vieworders" class="text-white">View Order</a>
                </h5>
            </nav>
            <!-- Breadcrumb -->
        </div>
    </div>

    <section class="pt-5">
        <div class="container">
            <div class="row">
                <!-- Sidebar -->
                <div class="col-lg-3 px-3">
                    <div class="account-nav rounded shadow bg-white p-4">
                        <div class="text-center mb-4">
                            <h4 class="mb-0">Hi <%= name %></h4>
                            <p class="text-muted">Your personal dashboard</p>
                        </div>
                        <div class="text-center my-3">
                            <a class="nav-link" href="/user/viewCart">
                                <i class="fa-solid fa-wallet me-1"></i>Wallet Amount: ₹<%= user ? user.wallet.toFixed(2) : '0.00' %>
                            </a>
                        </div>
                        <hr>
                        <button class="btn btn-primary w-100" type="button" data-bs-toggle="collapse" data-bs-target="#navCollapse" aria-expanded="false" aria-controls="navCollapse">
                            Menu
                        </button>
                        <div class="collapse mt-3" id="navCollapse">
                            <ul class="list-unstyled mb-0">
                                <li><a href="/user/profile" class="text-decoration-none text-primary d-block py-2"><button class="btn btn-secondary w-100">Profile</button></a></li>
                                <li><a href="/user/address" class="text-decoration-none text-dark d-block py-2"><button class="btn btn-secondary w-100">Address</button></a></li>
                                <li><a href="/user/orders" class="text-decoration-none text-dark d-block py-2"><button class="btn btn-primary w-100">My Orders</button></a></li>
                                <li><a href="/user/getWishlist" class="text-decoration-none text-dark d-block py-2"><button class="btn btn-secondary w-100">My Wishlist</button></a></li>
                                <li><a href="/user/wallethistory" class="text-decoration-none text-dark d-block py-2"><button class="btn btn-secondary w-100">Wallet History</button></a></li>
                                <li><a href="/user/forgot" class="text-decoration-none text-dark d-block py-2"><button class="btn btn-secondary w-100">Change Password</button></a></li>
                            </ul>
                        </div>
                    </div>
                </div>

                <!-- Main Content -->
                <div class="col-lg-9 px-3 justify-content-center d-flex">
                    <div class="col-md-9 checkout">
                        <div class="container">
                            <div class="d-flex justify-content-between">
                                <h4>Order Details</h4>
                            </div>

                            <!-- Shipping Address Section -->
                            <div class="card mb-4">
                                <div class="card-body">
                                    <h4 class="card-title">Shipping Address</h4>
                                    <hr />
                                    <% if (order.shippingAddress) { %>
                                        <p><strong>To:</strong> <%= order.shippingAddress.name %></p>
                                        <p><%= order.shippingAddress.address %>, <%= order.shippingAddress.city %>, <%= order.shippingAddress.state %>, <%= order.shippingAddress.pincode %></p>
                                        <p>Mobile: <%= order.shippingAddress.mobileNumber %></p>
                                    <% } else { %>
                                        <p class="text-danger">Shipping address not available</p>
                                    <% } %>
                                </div>
                            </div>

                            <!-- Coupon Applied Section -->
                            <div class="card mb-4">
                                <div class="card-body">
                                    <h4 class="card-title">Coupon Applied</h4>
                                    <hr />
                                    <% if (order.couponApplied && order.couponApplied.code) { %>
                                        <p><strong>Coupon:</strong> <%= order.couponApplied.code %></p>
                                        <p>Cashback: ₹<%= order.couponApplied.discount %></p>
                                    <% } else { %>
                                        <p class="text-danger">No coupon applied</p>
                                    <% } %>
                                </div>
                            </div>

                            <!-- Ordered Items Section -->
                            <div class="row">
                                <% order.orderedItems.forEach((pdt) => { %>
                                    <div class="col-md-4 mb-4">
                                        <div class="order-item card">
                                            <img src="/<%= pdt.pimages[0] || 'default.jpg' %>" class="card-img-top" alt="Product Image">
                                            <div class="order-item-details card-body">
                                                <h5 class="card-title"><%= pdt.productId.name %></h5>
                                                <% 
                                                    const unitPrice = pdt.price; 
                                                    const totalDiscount = pdt.offerDiscount || 0; 
                                                    const totalOriginalPrice = unitPrice * pdt.quantity; 
                                                    const totalPricePaid = totalOriginalPrice - totalDiscount; 
                                                %>
                                                <p>Original Price (x<%= pdt.quantity %>): ₹<%= totalOriginalPrice.toFixed(2) %></p>
                                                <% if(pdt.offerDiscount > 0) { %>
                                                    <p class="text-success">Discount: -₹<%= totalDiscount.toFixed(2) %></p>
                                                    <p><strong>Total Price Paid: ₹<%= totalPricePaid.toFixed(2) %></strong></p>
                                                <% } else { %>
                                                    <p><strong>Total Price Paid: ₹<%= totalOriginalPrice.toFixed(2) %></strong></p>
                                                <% } %>
                                                <p>Qty: <%= pdt.quantity %></p>
                                                <p>Size: <%= pdt.size %></p>
                                                <p>Status: <%= pdt.status %></p>

                                                <% if(pdt.status !== "Cancelled" && (order.status === "Pending" || order.status === "Shipped")) { %>
                                                    <button class="btn btn-danger cancel-btn" 
                                                            data-order-id="<%= order._id %>" 
                                                            data-product-id="<%= pdt.productId._id %>"
                                                            data-size="<%= pdt.size %>"
                                                            aria-label="Cancel this item">
                                                        Cancel
                                                    </button>
                                                <% } else if(pdt.status === "Cancelled") { %>
                                                    <p class="text-danger font-weight-bold">Cancelled</p>
                                                <% } else if(order.status === "Delivered" && !pdt.returned && !pdt.returnRequested) { %>
                                                    <button class="btn btn-danger request-return-btn" 
                                                            data-order-id="<%= order._id %>" 
                                                            data-product-id="<%= pdt.productId._id %>"
                                                            data-size="<%= pdt.size %>"
                                                            data-amount="<%= totalPricePaid.toFixed(2) %>"
                                                            aria-label="Request return for this item">
                                                        Request Return
                                                    </button>
                                                <% } else if(pdt.returnRequested) { %>
                                                    <p class="text-warning font-weight-bold">Return Requested (Pending Approval)</p>
                                                <% } %>
                                            </div>
                                        </div>
                                    </div>
                                <% }) %>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Cancel Button Logic
            const cancelButtons = document.querySelectorAll('.cancel-btn');
            cancelButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const orderId = this.getAttribute('data-order-id');
                    const productId = this.getAttribute('data-product-id');
                    const size = this.getAttribute('data-size');

                    Swal.fire({
                        title: 'Are you sure?',
                        text: 'Do you want to cancel this item?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes, cancel it!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            fetch(`/user/cancelOrder/${orderId}?pid=${productId}&size=${size}`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                credentials: "include",
                            })
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error(`HTTP error! Status: ${response.status}`);
                                }
                                return response.json();
                            })
                            .then(data => {
                                if (data.success) {
                                    Swal.fire('Cancelled!', 'Your item has been canceled.', 'success')
                                    .then(() => {
                                        location.reload();
                                    });
                                } else {
                                    Swal.fire('Error!', data.message, 'error');
                                }
                            })
                            .catch(error => {
                                console.error('Fetch error:', error);
                                Swal.fire('Error!', `Something went wrong: ${error.message}`, 'error');
                            });
                        }
                    });
                });
            });

            // Request Return Button Logic
            const returnButtons = document.querySelectorAll('.request-return-btn');
            returnButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const orderId = this.getAttribute('data-order-id');
                    const productId = this.getAttribute('data-product-id');
                    const size = this.getAttribute('data-size');
                    const amount = parseFloat(this.getAttribute('data-amount'));

                    Swal.fire({
                        title: 'Request Return',
                        text: 'Please confirm your return request. It will be reviewed by an admin.',
                        icon: 'warning',
                        input: 'text',
                        inputPlaceholder: 'Enter reason for return (optional)',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Submit Request'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            const returnReason = result.value || 'No reason provided';
                            const url = `/user/requestReturn/${orderId}`;
                            console.log('Sending request to:', url, { productId, size, amount, returnReason });

                            fetch(url, {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ productId, size, amount, returnReason }),
                                credentials: 'include'
                            })
                            .then(response => {
                                console.log('Response status:', response.status);
                                return response.json();
                            })
                            .then(data => {
                                console.log('Response data:', data);
                                if (data.success) {
                                    Swal.fire('Request Submitted!', 'Your return request is pending admin approval.', 'success')
                                        .then(() => location.reload());
                                } else {
                                    Swal.fire('Error!', data.message, 'error');
                                }
                            })
                            .catch(error => {
                                console.error('Fetch error:', error);
                                Swal.fire('Error!', 'Something went wrong with the request.', 'error');
                            });
                        }
                    });
                });
            });
        });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
<%- include('../../partials/footer') %>