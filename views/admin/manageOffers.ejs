<%- include('../partials/adminHeader') %>

<div class="admin-container">
  <!-- Sidebar -->
  <aside class="sidebar">
    <h3 class="logo">Admin Panel</h3>
    <ul class="nav">
      <li>
        <a href="/admin/dashboard"
          ><i class="bi bi-speedometer2"></i> Dashboard</a
        >
      </li>
      <li>
        <a href="/admin/category"><i class="bi bi-tags"></i> Categories</a>
      </li>
      <li>
        <a href="/admin/products"><i class="bi bi-box-seam"></i> Products</a>
      </li>
      <li>
        <a href="/admin/users"><i class="bi bi-people"></i> Manage Users</a>
      </li>
      <li>
        <a href="/admin/manageOrders"
          ><i class="bi bi-cart-check"></i> Orders</a
        >
      </li>
      <li>
        <a href="/admin/getOffers" class="active"
          ><i class="bi bi-percent"></i> Manage Offers</a
        >
      </li>
    </ul>
    <li>
      <a href="/admin/logout" class="logout"
        ><i class="bi bi-box-arrow-right"></i> Logout</a
      >
    </li>
  </aside>

  <!-- Main Content -->
  <main class="content">
    <div class="header d-flex justify-content-between align-items-center">
      <h3>Manage Offers</h3>
      <button
        class="btn btn-primary"
        data-bs-toggle="modal"
        data-bs-target="#addOfferModal"
      >
        <i class="bi bi-plus"></i> Add Offer
      </button>
    </div>

    <!-- Offers Table -->
    <div class="table-container">
      <table class="user-table">
        <thead>
          <tr>
            <th>Offer Name</th>
            <th>Type</th>
            <th>Discount Type</th>
            <th>Discount Value</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Status</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% offers.forEach(offer => { %>
          <tr>
            <td><%= offer.name %></td>
            <td><%= offer.type %></td>
            <td><%= offer.discountType %></td>
            <td><%= offer.discountValue %></td>
            <td><%= new Date(offer.startDate).toLocaleDateString() %></td>
            <td><%= new Date(offer.endDate).toLocaleDateString() %></td>
            <td>
              <% if (offer.status === "Active") { %>
              <span class="text-success">Active</span>
              <% } else { %>
              <span class="text-danger">Inactive</span>
              <% } %>
            </td>
            <td>
              <button
                class="btn btn-primary btn-sm edit-offer"
                data-id="<%= offer._id %>"
              >
                Edit
              </button>
              <button
                class="btn btn-danger btn-sm delete-offer"
                data-id="<%= offer._id %>"
              >
                Delete
              </button>
            </td>
          </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
  </main>
</div>

<!-- Add Offer Modal -->
<div
  class="modal fade"
  id="addOfferModal"
  tabindex="-1"
  aria-labelledby="addOfferModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addOfferModalLabel">Add New Offer</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
          aria-label="Close"
        ></button>
      </div>
      <div class="modal-body">
        <form id="addOfferForm" action="/admin/addOffer" method="POST">
          <div class="mb-3">
            <label for="offerType" class="form-label">Offer Type</label>
            <select class="form-select" id="offerType" name="type" required>
              <option value="Product">Product Offer</option>
              <option value="Category">Category Offer</option>
              <option value="Referral">Referral Offer</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="offerName" class="form-label">Offer Name</label>
            <input
              type="text"
              class="form-control"
              id="offerName"
              name="name"
              required
            />
          </div>
          <div class="mb-3">
            <label for="discountType" class="form-label">Discount Type</label>
            <select
              class="form-select"
              id="discountType"
              name="discountType"
              required
            >
              <option value="Percentage">Percentage</option>
              <option value="Fixed">Fixed Amount</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="discountValue" class="form-label">Discount Value</label>
            <input
              type="number"
              class="form-control"
              id="discountValue"
              name="discountValue"
              required
            />
          </div>
          <div class="mb-3">
            <label for="startDate" class="form-label">Start Date</label>
            <input
              type="date"
              class="form-control"
              id="startDate"
              name="startDate"
              required
            />
          </div>
          <div class="mb-3">
            <label for="endDate" class="form-label">End Date</label>
            <input
              type="date"
              class="form-control"
              id="endDate"
              name="endDate"
              required
            />
          </div>
          <div class="mb-3">
            <label for="status" class="form-label">Status</label>
            <select class="form-select" id="status" name="status" required>
              <option value="Active">Active</option>
              <option value="Inactive">Inactive</option>
            </select>
          </div>
          <button type="submit" class="btn btn-primary">Save Offer</button>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Edit Offer Modal -->
<!-- Edit Offer Modal -->
<div
  class="modal fade"
  id="editOfferModal"
  tabindex="-1"
  aria-labelledby="editOfferModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editOfferModalLabel">Edit Offer</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
          aria-label="Close"
        ></button>
      </div>
      <div class="modal-body">
        <form id="editOfferForm" method="POST">
          <div class="mb-3">
            <label for="editOfferType" class="form-label">Offer Type</label>
            <select class="form-select" id="editOfferType" name="type" required>
              <option value="Product">Product</option>
              <option value="Category">Category</option>
              <option value="Referral">Referral</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="editOfferName" class="form-label">Offer Name</label>
            <input
              type="text"
              class="form-control"
              id="editOfferName"
              name="name"
              required
            />
          </div>
          <div class="mb-3">
            <label for="editDiscountType" class="form-label"
              >Discount Type</label
            >
            <select
              class="form-select"
              id="editDiscountType"
              name="discountType"
              required
            >
              <option value="Percentage">Percentage</option>
              <option value="Fixed">Fixed Amount</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="editDiscountValue" class="form-label"
              >Discount Value</label
            >
            <input
              type="number"
              class="form-control"
              id="editDiscountValue"
              name="discountValue"
              required
            />
          </div>
          <div class="mb-3">
            <label for="editStartDate" class="form-label">Start Date</label>
            <input
              type="date"
              class="form-control"
              id="editStartDate"
              name="startDate"
              required
            />
          </div>
          <div class="mb-3">
            <label for="editEndDate" class="form-label">End Date</label>
            <input
              type="date"
              class="form-control"
              id="editEndDate"
              name="endDate"
              required
            />
          </div>
          <div class="mb-3">
            <label for="editStatus" class="form-label">Status</label>
            <select class="form-select" id="editStatus" name="status" required>
              <option value="Active">Active</option>
              <option value="Inactive">Inactive</option>
            </select>
          </div>
          <button type="submit" class="btn btn-primary">Save Changes</button>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- SweetAlert Script -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  // Add Offer Form Submission using fetch
  document
    .getElementById("addOfferForm")
    .addEventListener("submit", async (e) => {
      e.preventDefault();

      const formData = new FormData(e.target);
      const formObject = {};

      formData.forEach((value, key) => {
        formObject[key] = value;
      });

      try {
        const response = await fetch("/admin/addOffer", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(formObject),
        });

        const data = await response.json();

        if (data.success) {
          Swal.fire({
            icon: "success",
            title: "Offer Added",
            text: data.message,
            confirmButtonText: "OK",
          }).then(() => {
            window.location.reload(); // Reload the page to reflect changes
          });
        } else {
          Swal.fire({
            icon: "error",
            title: "Error",
            text: data.message || "An error occurred. Please try again later.",
            confirmButtonText: "OK",
          });
        }
      } catch (error) {
        Swal.fire({
          icon: "error",
          title: "Network Error",
          text: "An error occurred while trying to add the offer.",
          confirmButtonText: "OK",
        });
      }
    });

  // Delete Offer
  document.querySelectorAll(".delete-offer").forEach((button) => {
    button.addEventListener("click", async (e) => {
      const offerId = e.target.getAttribute("data-id");

      Swal.fire({
        title: "Are you sure?",
        text: "You won't be able to revert this!",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes, delete it!",
      }).then(async (result) => {
        if (result.isConfirmed) {
          try {
            const response = await fetch(`/admin/deleteOffer/${offerId}`, {
              method: "DELETE",
              headers: { "Content-Type": "application/json" },
            });

            const data = await response.json();

            if (data.success) {
              Swal.fire({
                icon: "success",
                title: "Offer Deleted",
                text: data.message,
                confirmButtonText: "OK",
              }).then(() => {
                window.location.reload(); // Reload the page to reflect changes
              });
            } else {
              Swal.fire({
                icon: "error",
                title: "Error",
                text: data.message || "An error occurred. Please try again.",
                confirmButtonText: "OK",
              });
            }
          } catch (error) {
            Swal.fire({
              icon: "error",
              title: "Error",
              text: "An error occurred. Please try again later.",
              confirmButtonText: "OK",
            });
          }
        }
      });
    });
  });

  // Handle Edit Button Click
  document.querySelectorAll(".edit-offer").forEach((button) => {
    button.addEventListener("click", async (e) => {
      const offerId = e.target.getAttribute("data-id");

      try {
        // Fetch offer data
        const response = await fetch(`/admin/getOffer/${offerId}`);
        const offer = await response.json();

        if (offer) {
          // Populate the edit modal with offer data
          document.getElementById("editOfferType").value = offer.type;
          document.getElementById("editOfferName").value = offer.name;
          document.getElementById("editDiscountType").value =
            offer.discountType;
          document.getElementById("editDiscountValue").value =
            offer.discountValue;
          document.getElementById("editStartDate").value = new Date(
            offer.startDate
          )
            .toISOString()
            .split("T")[0];
          document.getElementById("editEndDate").value = new Date(offer.endDate)
            .toISOString()
            .split("T")[0];
          document.getElementById("editStatus").value = offer.status;

          // Update the form action URL with the offer ID
          document.getElementById(
            "editOfferForm"
          ).action = `/admin/updateOffer/${offerId}`;

          // Show the modal
          new bootstrap.Modal(document.getElementById("editOfferModal")).show();
        } else {
          Swal.fire({
            icon: "error",
            title: "Error",
            text: "Offer not found.",
            confirmButtonText: "OK",
          });
        }
      } catch (error) {
        Swal.fire({
          icon: "error",
          title: "Error",
          text: "An error occurred while fetching the offer.",
          confirmButtonText: "OK",
        });
      }
    });
  });

  document
    .getElementById("editOfferForm")
    .addEventListener("submit", async (e) => {
      e.preventDefault();

      const formData = new FormData(e.target);
      const formObject = {};

      formData.forEach((value, key) => {
        formObject[key] = value;
      });

      const offerId = document
        .getElementById("editOfferForm")
        .action.split("/")
        .pop(); // Extract the offer ID from URL

      try {
        const response = await fetch(`/admin/updateOffer/${offerId}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(formObject),
        });

        const data = await response.json();

        if (data.success) {
          Swal.fire({
            icon: "success",
            title: "Offer Updated",
            text: data.message,
            confirmButtonText: "OK",
          }).then(() => {
            window.location.reload(); // Reload the page to reflect changes
          });
        } else {
          Swal.fire({
            icon: "error",
            title: "Error",
            text: data.message || "An error occurred. Please try again later.",
            confirmButtonText: "OK",
          });
        }
      } catch (error) {
        Swal.fire({
          icon: "error",
          title: "Network Error",
          text: "An error occurred while trying to update the offer.",
          confirmButtonText: "OK",
        });
      }
    });
</script>

<%- include('../partials/footer') %>

<!-- Custom Styles -->
<style>
  .admin-container {
    display: flex;
    height: 100vh;
    background: #f5f5f5;
  }
  .sidebar {
    width: 250px;
    background: #2c3e50;
    color: white;
    padding: 20px;
    display: flex;
    flex-direction: column;
  }
  .sidebar .logo {
    text-align: center;
    font-size: 22px;
    font-weight: bold;
    margin-bottom: 30px;
  }
  .nav {
    list-style: none;
    padding: 0;
  }
  .nav li {
    margin: 10px 0;
  }
  .nav a {
    color: white;
    text-decoration: none;
    font-size: 16px;
    display: flex;
    align-items: center;
    padding: 12px;
    border-radius: 5px;
    transition: 0.3s;
  }
  .nav a i {
    margin-right: 10px;
    font-size: 20px;
  }
  .nav a:hover,
  .nav a.active {
    background: rgba(255, 255, 255, 0.2);
  }
  .content {
    flex-grow: 1;
    padding: 40px;
  }
  .header {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  .header h3 {
    color: #2c3e50;
  }
  .table-container {
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
  }
  .user-table {
    width: 100%;
    border-collapse: collapse;
  }
  .user-table th,
  .user-table td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #ddd;
  }
  .user-table th {
    background: #2c3e50;
    color: white;
  }
  .text-success {
    color: #28a745;
  }
  .text-danger {
    color: #dc3545;
  }
  .btn {
    font-size: 14px;
  }
  .btn-sm {
    padding: 5px 10px;
  }
</style>
